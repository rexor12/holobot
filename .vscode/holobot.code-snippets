{
	// Place your snippets for python here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"Holo Event Listener": {
		"prefix": "hel",
		"description": "An event listener for Holobot.",
		"body": [
			"from holobot.sdk.ioc.decorators import injectable",
			"from holobot.sdk.reactive import IListener",
			"",
			"@injectable(IListener[${1:EventType}])",
			"class ${1:EventType}Listener(IListener[${1:EventType}]):",
    		"\tasync def on_event(self, event: ${1:EventType}) -> None:",
        	"\t\tpass",
			""
		]
	},

	"Holo Workflow": {
		"prefix": "hwf",
		"description": "A workflow for Holobot.",
		"body": [
			"from holobot.discord.sdk.actions import ReplyAction, EditMessageAction",
			"from holobot.discord.sdk.actions.enums import DeferType",
			"from holobot.discord.sdk.enums import Permission",
			"from holobot.discord.sdk.models import InteractionContext",
			"from holobot.discord.sdk.workflows import IWorkflow, WorkflowBase",
			"from holobot.discord.sdk.workflows.interactables.decorators import command, component",
			"from holobot.discord.sdk.workflows.interactables.models import InteractionResponse",
			"from holobot.discord.sdk.workflows.models import ServerChatInteractionContext",
			"from holobot.sdk.i18n import II18nProvider",
			"from holobot.sdk.ioc.decorators import injectable",
			"from holobot.sdk.logging import ILoggerFactory",
			"",
			"@injectable(IWorkflow)",
			"class ${1:My}Workflow(WorkflowBase):",
			"\tdef __init__(",
			"\t\tself,",
			"\t\ti18n_provider: II18nProvider,",
			"\t\tlogger_factory: ILoggerFactory",
			"\t) -> None:",
			"\t\tsuper().__init__()",
			"\t\tself.__i18n_provider = i18n_provider",
			"",
			"\t@command(",
			"\t\tname=\"${2:name}\",",
			"\t\tdescription=\"${3:description}\",",
			"\t\trequired_permissions=Permission.${4:ADMINISTRATOR}",
			"\t)",
			"\tasync def ${5:execute}(",
			"\t\tself,",
			"\t\tcontext: ServerChatInteractionContext",
			"\t) -> InteractionResponse:",
			"\t\traise NotImplementedError",
			""
		]
	}
}